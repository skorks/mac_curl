#!/usr/bin/env ruby
require 'escort'
require 'mac_curl'

Escort::App.create do |app|
  app.options do
    version "mac_curl #{MacCurl::VERSION}"
    banner <<-EOS
A CURL like script to do MAC signed requests to urls.

Usage:
       mac_curl [global_options] <command> [options]

where <command> can be one of: #{app.command_names.join(", ")}
and where [global_options] are (command options are contained in the help for each command):

EOS
  end

  app.command :config do |command|
    command.options do
      banner "Read or create the currently active configuration file"
      opt :read, "Show the currently active config file", :short => '-r', :long => '--read', :type => :boolean, :default => true, :required => false
      opt :write, "Write a default config file to a given path or home directory if no path is given", :short => '-w', :long => '--write', :type => :boolean, :default => false, :required => false
    end

    command.action do |global_options, command_options, arguments|
      #bundle exec bin/mac_curl config -r
      #bundle exec bin/mac_curl config -w ./
      MacCurl::Commands::Config.for(global_options, command_options, arguments)
    end
  end

  app.command :credentials do |command|
    command.options do
      banner "Fetch some MAC credentials given a url we want to hit with said credentials"
      opt :api_key, "The API key to use", :short => :none, :long => '--api-key', :type => :string
      opt :api_secret, "The API secret to use", :short => :none, :long => '--api-secret', :type => :string
      opt :direct, "Assume that the url given is that of a credentials server, so no need to discover it", :short => :none, :long => '--direct', :type => :boolean, :default => false, :required => false
      opt :add_to_config, "If we get back some credentials, add them to our config file", :short => '-a', :long => '--add-to-config', :type => :boolean, :default => false, :required => false
    end

    command.action do |global_options, command_options, arguments|
      #bundle exec bin/mac_curl credentials --api-key="com.playup.ios.live" --api-secret="QwFHK6n3WAqhDPiz" http://localhost:8080/v2/clients
      #bundle exec bin/mac_curl credentials --api-key="com.playup.ios.live" --api-secret="QwFHK6n3WAqhDPiz" --direct http://localhost:9090/credentials
      MacCurl::Commands::Credentials.for(global_options, command_options, arguments)
    end
  end

  app.command :request do |command|
    command.options do
      banner "Perform a mac signed request to the given url"

      opt :request_method, "The HTTP request method to use for request (GET, POST)", :short => '-X', :long => '--request', :type => :string
      opt :header, "HTTP header to use for request as a colon separated key value pair (may be used multiple times)", :short => '-H', :long => '--header', :multi => true, :type => :string
      opt :'api-signature', "Include the API sigature header 'X-PlayUp-Api-Key'", :short => :none, :long => '--api-signature', :default => true, :required => false, :type => :boolean
      opt :'mac-signature', "Include MAC authentication", :short => :none, :long => '--mac-signature', :default => true, :required => false, :type => :boolean
      opt :api_key, "The API key to use", :short => :none, :long => '--api-key', :type => :string
      opt :api_secret, "The API secret to use", :short => :none, :long => '--api-secret', :type => :string
      opt :mac_key, "The MAC key to use", :short => :none, :long => '--mac-key', :type => :string
      opt :mac_secret, "The MAC secret to use", :short => :none, :long => '--mac-secret', :type => :string
      opt :data, "The data to send as a body of a post request", :short => '-d', :long => '--data', :type => :string
    end

    command.action do |global_options, command_options, arguments|
      #bundle exec bin/mac_curl request -X HEAD -H "Content-Type: application/json","Accept-Language: zh-CN","Accept: application/json, application/vnd.playup.*, */*" http://localhost:8080/v2/clients/live
  #bundle exec bin/mac_curl request -H "Content-Type: application/json","Accept-Language: zh-CN","Accept: application/json, application/vnd.playup.*, */*" --no-api-signature --no-mac-signature http://localhost:8080/sections/welcome
  #bundle exec bin/mac_curl request --api-key="abc" --api-secret="123" --mac-key="xxx" --mac-secret="yyy" http://localhost:8080/v2/clients/live
      MacCurl::Commands::Request.for(global_options, command_options, arguments)
    end
  end

  app.before do |command_name, global_options, command_options, arguments|
    config = nil
    begin
      config_file = MacCurl::Config.find
      unless config_file
        config_file = MacCurl::Config.write_default
      end
      config = MacCurl::Config.load_config(config_file)
    rescue => e
      raise "Unable to load/create the config file, this shouldn't happen!"
    end

    MacCurl::Logging.logger.sev_threshold = Logger.const_get(config["log_level"].upcase)
  end

  app.on_error do |error|
    raise error
  end
end
